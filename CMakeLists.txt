cmake_minimum_required(VERSION 3.0)

if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
  	set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
	  CACHE STRING "")
	MESSAGE(STATUS "Using vcpkg")
endif()

project(traph)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

SET(TRAPH_PATH ${PROJECT_SOURCE_DIR} CACHE STRING "Adds a path to TRAPH" FORCE)
SET(TRAPH_PATH_INCLUDE ${TRAPH_PATH}/traph/include CACHE STRING "Adds a path to TRAPH header" FORCE)
SET(TRAPH_PATH_HEADER ${TRAPH_PATH_INCLUDE}/traph CACHE STRING "Adds a path to TRAPH header" FORCE)
SET(TRAPH_PATH_SOURCE ${TRAPH_PATH}/traph/source CACHE STRING "Adds a path to TRAPH source" FORCE)
SET(TRAPH_PATH_DEPENDENCIES ${TRAPH_PATH}/traph/contrib CACHE STRING "Adds a path to TRAPH dependencies" FORCE)

SET(TRAPH_ACCELERATE 1 CACHE STRING
"Specify the feature Possible values:
1 - mkl
2 - openblas
3 - cublas
4 - clblas")

IF(TRAPH_ACCELERATE EQUAL 1)
	SET(TRAPH_BUILD_MKL TRUE)
	ADD_DEFINITIONS(-DTRAPH_BUILD_MKL)

	# set(BLA_VENDOR Intel)
	find_package(BLAS REQUIRED)
	if (BLAS_FOUND)
		include_directories(${BLAS_INCDIR})
		message(STATUS BLAS found: ${BLAS_DIR})
	endif()
ELSEIF(TRAPH_ACCELERATE EQUAL 2)
	SET(TRAPH_BUILD_OPENBLAS TRUE)
	ADD_DEFINITIONS(-DTRAPH_BUILD_OPENBLAS)

	set(BLA_VENDOR Open)
	find_package(BLAS REQUIRED)
	if (BLAS_FOUND)
		include_directories(${BLAS_INCDIR})
		message(STATUS BLAS found: ${BLAS_DIR})
	endif()
ELSEIF(TRAPH_ACCELERATE EQUAL 3)
	SET(TRAPH_BUILD_CUBLAS TRUE)
	ADD_DEFINITIONS(-DTRAPH_BUILD_CUBLAS)
ELSEIF(TRAPH_ACCELERATE EQUAL 4)
	SET(TRAPH_BUILD_CLBLAS TRUE)
	ADD_DEFINITIONS(-DTRAPH_BUILD_CLBLAS)
ELSE()
	MESSAGE(FATAL_ERROR "Unsupported build platform: " ${OCTOON_BUILD_PLATFORM})
ENDIF()

ADD_SUBDIRECTORY(traph)
